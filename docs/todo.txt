STETECH1

LINKS
https://jmonkeyengine.github.io/wiki/jme3/advanced/physics.html#kinematic-vs-dynamic-vs-static
https://hub.jmonkeyengine.org/t/character-control-and-walkdirection/15804/10
https://hub.jmonkeyengine.org/t/bettercharactercontrol-sync-between-server-and-client/33800


URGENT
	Adjust walkdir by fraction of dist
Use MyBetterCharacterControl2 - check it works first
Avatar falling slowly when not moving forwards (just like jetpac?)
No position data when new position is forced?
Server log still flickery
	Turn off client-side physics - why do I need it?
Can't see other avatar


TODO
Make server & client abstract
force avatar warp test
Draw map
Add walls
Search for todos
Prevent falling as this cannot be handled, since walkDirection can't go up?  But what about JecPac?
Todo - am I adjusting rotation?
Server don't check for hit unless client thinks it has hit
Hitscan weapons
Use test annotations
Add lots of comments
Unit test rewind avatars
Spectator mode
Create server console commands
Create game lobby
Test with a few physics blocks
Send ability updates to client, to confirm ammo etc...
Add walls to map
Show where players are according to server (in realtime)
Create server-controlled moving item to check interpol
Create game "simulator"?
Create generic classes and test them
Reduce dependencies between classes
Treat bullets like players avatar
Shooting
Make all objects kinematic on client side?


CLIENT
Send inputs every "server tickrate"
Render others from history - 100ms ago, lerp between historical positions


SERVER
Receive player inputs and pass the to avatar (if later than prev)
Run game loop every 20ms
	Send entity positions for changed entities


PLAYER CONTROL
Turning is handled entirely by the client
Player moves and their avatar is moved immediately
	Client sends input to server
	Server calcs position of the client
	Server sends back position of all entities
	Client corrects itself based on servers position
Player shooting
	Client sends shot msg with timestamp and direction
	Server moves players to correct position and checks the client has hit
	 
	
LATER
Don't send entity update if position not changed
Split up into separate packages: AbstractClient, Abstractserver, shared, Sorcerers
Reduce object creation, including calls to clone()
Kick players who don't move
Use tpf to ensure clients/server run at same speed
Stop client if no comms for a while
client/server encryption
Make classes final

